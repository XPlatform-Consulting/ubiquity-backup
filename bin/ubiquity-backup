#!/usr/bin/env ruby
lib_path = File.expand_path('../../lib', __FILE__)
$:.unshift(lib_path) unless $:.include?(lib_path) or !File.exists?(lib_path)

require 'rubygems'
require 'fileutils'
require 'logger'
require 'net/http'
require 'optparse'
require 'shellwords'

ARGV << '--help' if ARGV.empty?

# #################################################################################################################### #

# @!group Default Parameter Values

@archive_archiware = true
def archive_archiware?; @archive_archiware end

@archive_aspera_cluster_manager = true
def archive_aspera_cluster_manager?; @archive_aspera_cluster_manager end

@archive_aspera_console = true
def archive_aspera_console?; @archive_aspera_console end

@archive_aspera_enterprise = true
def archive_aspera_enterprise?; @archive_aspera_enterprise end

@archive_aspera_faspex = true
def archive_aspera_faspex?; @archive_aspera_faspex end

@archive_aspera_orchestrator = true
def archive_aspera_orchestrator?; @archive_aspera_orchestrator end

@archive_aspera_shares = true
def archive_aspera_shares?; @archive_aspera_shares end

@archive_cantemo_portal = true
def archive_cantemo_portal?; @archive_cantemo_portal end

@archive_dir_base_path = '/tmp' # Dir.tmpdir
def archive_dir_base_path; @archive_dir_base_path end

@archive_name = "ubiquity-backup-#{Time.now.strftime('%Y%m%d')}-#{$$}-#{rand(0x100000000).to_s(36)}"
def archive_name; @archive_name end

@dry_run = true
def dry_run?; @dry_run end

# @!endgroup

# #################################################################################################################### #

# @!group Argument Handling

op = OptionParser.new
op.program_name = File.basename($0)
op.banner = <<-BANNER
Usage: #{op.program_name} [options] [system name(s)]

Examples:

  1. Dry Run of a Backup of All Supported Systems (Default)
    # #{op.program_name} --dry-run

  2. Actual Backup of All Supported Systems
    # #{op.program_name} --no-dry-run

  3. Backup Just Cantemo Portal
    # #{op.program_name} cantemo_portal --no-dry-run

  4. Backup Aspera Enterprise and Aspera Shares Only
    # #{op.program_name} --no-dry-run aspera_enterprise aspera_shares

Options:
BANNER
op.on('--[no-]archive-archiware', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_archiware?}\n\n" ) { |v| @archive_archiware = v }
op.on('--[no-]archive-aspera-cluster-manager', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_cluster_manager?}\n\n" ) { |v| @archive_aspera_cluster_manager = v }
op.on('--[no-]archive-aspera-console', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_console?}\n\n" ) { |v| @archive_aspera_console = v }
op.on('--[no-]archive-aspera-enterprise', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_enterprise?}\n\n" ) { |v| @archive_aspera_enterprise = v }
op.on('--[no-]archive-aspera-faspex', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_faspex?}\n\n" ) { |v| @archive_aspera_faspex = v }
op.on('--[no-]archive-aspera-orchestrator', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_orchestrator?}\n\n" ) { |v| @archive_aspera_orchestrator = v }
op.on('--[no-]archive-aspera-shares', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_aspera_shares?}\n\n" ) { |v| @archive_aspera_shares = v }
op.on('--[no-]archive-cantemo-portal', 'If set to false then an attempt to backup this system will not be made.', "default: #{archive_cantemo_portal?}\n\n" ) { |v| @archive_cantemo_portal = v }
op.on('--archive-path PATH', 'The directory to use when building the archive.', "default: '#{archive_dir_base_path}'\n\n") { |v| puts "Setting Archive Path: '#{v}'"; @archive_dir_base_path = v }
op.on('--archive-name NAME', 'Will override the generated archive name with whatever is specified.', "example: #{archive_name}\n\n") { |v| @archive_name = v }
op.on('--[no-]dry-run', 'Will output the commands to be run but will not execute them.', "default: #{dry_run?}\n\n") { |v| @dry_run = v }
op.on('--help', 'Display this message.') { puts op; puts banner_footer; exit }
def banner_footer
  <<-BANNER

System Names:
  all (default)
  archiware
  aspera_console
  aspera_enterprise
  aspera_faspex
  aspera_orchestrator
  aspera_shares
  cantemo_portal

  * Note: Supplying a system name will override any --no-[system-name] options
  BANNER
end
op.parse!

# Look for specific systems being passes as arguments
unless ARGV.empty?
  @archive_archiware              = false
  @archive_aspera_cluster_manager = false
  @archive_aspera_console         = false
  @archive_aspera_enterprise      = false
  @archive_aspera_faspex          = false
  @archive_aspera_orchestrator    = false
  @archive_aspera_shares          = false
  @archive_cantemo_portal         = false

  ARGV.each do |val|
    _val = val.downcase.gsub(/[-_]/, '')
    case _val
      when 'all'
        @archive_archiware              = true
        @archive_aspera_cluster_manager = true
        @archive_aspera_console         = true
        @archive_aspera_enterprise      = true
        @archive_aspera_faspex          = true
        @archive_aspera_orchestrator    = true
        @archive_aspera_shares          = true
        @archive_cantemo_portal         = true
      when 'archiware';            @archive_archiware               = true
      when 'asperaclustermanager'; @archive_aspera_cluster_manager  = true
      when 'asperaconsole';        @archive_aspera_console          = true
      when 'asperaenterprise';     @archive_aspera_enterprise       = true
      when 'asperafaspex';         @archive_aspera_faspex           = true
      when 'asperaorchestrator';   @archive_aspera_orchestrator     = true
      when 'asperashares';         @archive_aspera_shares           = true
      when 'cantemoportal';        @archive_cantemo_portal          = true
      else
        abort <<-ERRMSG
        Unknown System Name: #{_val}
        Known System Names:
          all
          archiware
          aspera_cluster_manager
          aspera_console
          aspera_enterprise
          aspera_faspex
          aspera_orchestrator
          aspera_shares
          cantemo_portal
        ERRMSG
    end
    # ARGV.each
  end
  # ARGV.empty?
end

# @!endgroup Argument Handling

# #################################################################################################################### #

class MultiIO
  def initialize(*targets); @targets = targets end
  def write(*args); @targets.each { |t| t.write(*args) rescue nil } end
  def close; @targets.each(&:close) end
  def add_target(target); @targets << target end
  def targets; @targets end
end

class Logger
  def add_target(target)
    _target = target.is_a?(String) ? File.open(target, 'a') : target
    @logdev.dev.add_target(_target) if @logdev.dev.respond_to?(:add_target)
  end
end

def execute(command_line, options = { })
  noop = options.fetch(:noop, dry_run?)

  command_line = command_line.shelljoin if command_line.is_a?(Array)

  (@command_history ||= [ ]) << command_line

  unless noop
    logger.info { "Executing: #{command_line}" }
    `#{command_line}`
  end
end

def echo(message, options = { })
  if dry_run?
    execute(%(echo "#{message}"))
  else
    puts message
  end
end

# #################################################################################################################### #

# @!group Archive Methods

# @see http://provideotech.org/automatically-backing-up-p5-indexes/
def archive_archiware(task = { })

  archiware_dir_path = '/usr/local/aw'
  # archiware_bin_dir_path = File.join(archiware_dir_path, 'bin')
  nsdchat_exec_file_path = File.join(archiware_dir_path, 'bin/nsdchat')
  version_file_path = File.join(archive_dir, 'archiware_version')
  unless dry_run?
    return unless File.exist?(archiware_dir_path)

    return unless File.executable?(nsdchat_exec_file_path)
  end

  execute(%("#{nsdchat_exec_file_path}" -c srvinfo lexxvers > "#{version_file_path}"))

  # nsdchat -C Job running

  tar_command_line = build_tar_command_line(:name => 'archiware', :path => archiware_dir_path)
  command_line = <<-CMDLINE
aws_running=$(( [[ -n $(ps ax | grep -e  "[0-9] #{File.join(archiware_dir_path, 'bin/nsd')}") ]] && echo 1 ) || echo 0)
aws_running_jobs=$( ([ $aws_running -eq 1 ] && echo $(aws_jobs_running=0;for job in $("#{nsdchat_exec_file_path}" -c Job names); do [ job == 'running' ] && ((aws_jobs_running++)); done; echo $aws_jobs_running)) ) || echo 0
[ $aws_running -eq 1 ] && [ $aws_running_jobs -eq 0 ] && echo "Stopping Server" && sudo "#{File.join(archiware_dir_path, 'stop-server')}"
[ $aws_running_jobs -eq 0 ] && echo "Creating Archive" && #{tar_command_line}
[ $aws_running -eq 1 ] && sudo "#{File.join(archiware_dir_path, 'start-server')}"
  CMDLINE
  execute(command_line)
end

def archive_aspera_console(task = { })
  console_backup_dir_path = '/opt/aspera/console/backup/'

  command_line = %(asctl console:backup_database)
  execute(command_line)

  tar_command_line = build_tar_command_line(:name => 'aspera_console_database', :path => '${new_archive_dir}')
  command_line = %(new_archive_dir=$(find "#{console_backup_dir_path}" -mindepth 1 -maxdepth 1 -type d | tail -1);#{tar_command_line})
  execute(command_line)

end

def archive_aspera_enterprise(task = { })

  configuration_file_path = task[:configuration_dir_path] || '/opt/aspera/etc/'
  var_file_path = task[:var_dir_path] || '/opt/aspera/var'
  backup_executable_path = task[:backup_executable_path] || '/opt/aspera/bin/asnodeadmin'

  archive_path(:name => 'aspera_enterprise_config', :path => configuration_file_path)
  archive_path(:name => 'aspera_enterprise_var', :path => var_file_path)

  execute(%("#{backup_executable_path}" -b "#{archive_dir}/aspera_enterprise_database.backup"))

end

def archive_aspera_faspex(task = { })
  console_backup_dir_path = '/opt/aspera/faspex/backup/'

  command_line = %(asctl faspex:backup_database)
  execute(command_line)

  tar_command_line = build_tar_command_line(:name => 'aspera_faspex_database', :path => '${new_archive_dir}')
  command_line = %(new_archive_dir=$(find "#{console_backup_dir_path}" -mindepth 1 -maxdepth 1 -type d | tail -1);#{tar_command_line})
  execute(command_line)
end

def archive_aspera_orchestrator(task = { })
  _archive_name = "aspera_orchestrator_snapshot_#{archive_name}"
  commands = [ ]
  commands << 'export GEM_HOME="/opt/aspera/orchestrator/vendor/dependencies/linux-gnu"'
  commands << 'cd /opt/aspera/orchestrator'
  commands << %(ruby script/runner 'FileUtils.cp(Snapshot.config_dump("#{_archive_name}").path, "#{archive_dir}")')
  execute(commands.join(';'))
end

def archive_aspera_shares(task = { })

  # we put the shares backup into it's own path so that we can find the file that it creates
  aspera_shares_archive_dir = File.join(archive_dir, 'aspera_shares_archive')
  execute(%(mkdir -p "#{aspera_shares_archive_dir}"))

  shares_backup_executable_path = task[:backup_executable_path] || '/opt/aspera/shares/u/setup/bin/backup'
  execute(%("#{shares_backup_executable_path}" "#{aspera_shares_archive_dir}"))
end

def archive_elasticsearch_index(args = { })
  name = args[:name] || 'elasticsearch_snapshot'
  host = args[:host] || 'localhost'
  port = args[:port] || 9200
  use_curl = args.fetch(:use_curl, (dry_run? || File.executable?('curl')))

  es_archive_dir = "#{archive_dir}/#{name}"
  execute(%(mkdir -p "#{es_archive_dir}"))

  # We need elastic search to be able to write to the directory
  execute(%(chmod 777 "#{es_archive_dir}"))

  data = %({ "type":"fs","settings":{"compress":true,"location":"#{es_archive_dir}" } })
  if dry_run? || use_curl
    execute(%(curl -XPUT "#{host}:#{port}/_snapshot/#{archive_name}" -d '#{data}'))
    execute(%(curl -XPUT "#{host}:#{port}/_snapshot/#{archive_name}/snapshot_1?wait_for_completion=true"))
    execute(%(curl -XDELETE "#{host}:#{port}/_snapshot/#{archive_name}"))
  else
    http = Net::HTTP.new(host, port)
    http.put("/_snapshot/#{archive_name}", data)
    http.put("/_snapshot/#{archive_name}/snapshot_1?wait_for_completion=true", '')
    http.delete("/_snapshot/#{archive_name}")
  end
end

# @see http://dev.mysql.com/doc/refman/5.6/en/mysqldump.html
def archive_mysql_database(task = { })


  args = task[:database]

  mysqldump_executable_path = args[:mysqldump_executable_path] || 'mysqldump'

  hostname = args.fetch(:hostname, false)
  port = args.fetch(:port, false)
  username = args.fetch(:username, false)
  password = args.fetch(:password, false)
  database_name = args[:name]

  gzip = args.fetch(:gzip, true)

  table_list = args[:table_list] || [ ]
  table_list = [ table_list ] unless table_list.is_a?(Array)
  table_name = args[:table_name]
  table_list << table_name if table_name

  target_full_file_path = args[:target_full_file_path] || File.join(archive_dir, "#{task[:name]}#{gzip ? '.tgz' : '.sql'}")

  command_line = [ mysqldump_executable_path ]
  command_line << '-h' << hostname if hostname
  command_line << '-P' << port if port
  command_line << '-u' << username if username
  command_line << "-p#{password}" if password
  #command_line << "--databases #{database_name}" if database_name
  command_line << database_name if database_name
  command_line = command_line +  table_list unless table_list.empty?
  command_line = command_line.shelljoin
  command_line << " > #{target_full_file_path}"
  #command_line = %("#{mysqldump_executable_path}" #{username ? " --user=#{username}" : ''}#{password ? " -password=#{password}" : ''}#{hostname ? " -h#{hostname}" : ''}#{port ? " --port=#{port}" : ''}#{table_list ? " #{table_list.join(' ')}" : ''} #{database_name} > #{target_full_file_path} )

  execute(command_line)
end

def build_tar_command_line(args = { })
  name = args[:name]
  path = args[:path]
  use_relative_path = args.fetch(:use_relative_path, true)
  file_name = "#{name}.tgz"
  if use_relative_path
    prefix = %(cd "#{archive_dir}";)
    target_file_path = file_name
  else
    prefix = ''
    target_full_file_path = args[:target] || File.join(archive_dir, file_name)
    target_file_path = target_full_file_path
  end

  use_sudo = args.fetch(:use_sudo, true)

  #logger.info { "Archiving Path: '#{path}' Name: #{name}" }
  # `tar cvzf cantemo_portal_configs.tgz /opt/cantemo/portal/configs`
  # `tar cvzf cantemo_portal_configs.tgz /opt/cantemo/portal/configs`

  %(#{prefix}#{use_sudo ? 'sudo ' : ''}tar czvf "#{target_file_path}" "#{path}")
end

def archive_path(args = { })
  command_line = build_tar_command_line(args)
  execute(command_line)
end

def archive_postgresql_database(task = { })
  args = task[:database]

  # http://www.postgresql.org/docs/8.4/static/continuous-archiving.html#BACKUP-ARCHIVING-WAL
  # http://www.postgresql.org/docs/8.0/static/backup.html
  # Copy Databases
  # WAL Logs
  pg_dump_executable_path = args[:pg_dump_executable_path] || '/usr/bin/pg_dump'

  hostname = args.fetch(:hostname, 'localhost')
  username = args.fetch(:username, 'postgres')
  password = args.fetch(:password, false)
  database_name = args[:name]

  target_full_file_path = args[:target_full_file_path] || File.join(archive_dir, "#{task[:name]}.sql")

  #command_line = %("#{pg_dump_executable_path}"#{hostname ? " -h #{hostname}" : ''}#{username ? " -U #{username}" : ''} #{database_name} | gzip > "#{target_full_file_path}")
  command_line = %(#{password ? "export PGPASSWORD=#{password};" : ''}"#{pg_dump_executable_path}"#{hostname ? " -h #{hostname}" : ''}#{username ? " -U #{username}" : ''} #{database_name} > "#{target_full_file_path}";unset PGPASSWORD)
  execute(command_line)

  { :files => [ target_full_file_path ] }
end

def archive_solr_index(args = { })
  # https://cwiki.apache.org/confluence/display/solr/Backing+Up
  # https://gist.github.com/ralph-tice/887414a7f8082a0cb828
end

# @!endgroup Archive Methods

# #################################################################################################################### #

@arguments ||= { }
def arguments; @arguments end

@output_command_history = true
def output_command_history?; @output_command_history end

@logger = Logger.new(arguments[:log_to] || MultiIO.new(STDOUT))
def logger; @logger end
logger.level = arguments[:log_level] || Logger::INFO

@archive_file_name = "#{archive_name}.tgz"
def archive_file_name; @archive_file_name end

@archive_dir = File.join(archive_dir_base_path, archive_name)
def archive_dir; @archive_dir end

@log_file_path = File.join(archive_dir, 'backup.log')
def log_file_path; @log_file_path end

@preserved_working_dir = Dir.pwd
def preserved_working_dir; @preserved_working_dir end

# #################################################################################################################### #

# @!group Archive Classes

class BaseArchive

  TASKS = [ ]

  def self.tasks; self::TASKS.dup end
  def self.tasks_by_name(tasks = self::TASKS); Hash[tasks.map { |task| [ task[:name], task] }] end

  def tasks; @tasks ||= TASKS.dup end
  def tasks_by_name; self.class.tasks_by_name end

end

# @existing_constants = Object.constants

class ArchiwareArchive < BaseArchive

  TASKS = [
    { :type => :archive_archiware },
    # { :type => :archive_path, :name => 'archiware', :path => '/usr/local/aw' }
  ]

end

class AsperaClusterManagerArchive < BaseArchive

  TASKS = [
    { :type => :archive_path, :name => 'aspera_cluster_manager', :path => '/opt/aspera/acm' }
  ]

end

# @see http://download.asperasoft.com/download/docs/console/2.5.1/admin_linux/webhelp/index.html#dita/backing_up_console_database.html
class AsperaConsoleServerArchive < BaseArchive


  TASKS = [
    { :type => :archive_aspera_console },

    # None of the following paths are in the documentation but did show up when the backup utility ran
    # { :type => :archive_path, :name => 'aspera_common_apache_config', :path => '/opt/aspera/common/apache/apache.rb.yml' },
    # { :type => :archive_path, :name => 'aspera_common_mysql_config', :path => '/opt/aspera/common/mysql/mysql.rb.yml' },
    # { :type => :archive_path, :name => 'aspera_console_config_file', :path => '/opt/aspera/console/console.rb.yml' },
    # { :type => :archive_path, :name => 'aspera_console_config_dir', :path => '/opt/aspera/console/config' },

    { :type => :archive_path, :name => 'aspera_common_dir', :path => '/opt/aspera/common' },
    { :type => :archive_path, :name => 'aspera_console_dir', :path => '/opt/aspera/console' },

  ]

end

# @see http://download.asperasoft.com/download/docs/entsrv/3.5.4/es_admin_linux/pdf2/EnterpriseServer_Admin_3.5.4_Linux.pdf
class AsperaEnterpriseServerArchive < BaseArchive

  TASKS = [
    { :type => :archive_aspera_enterprise },
    { :type => :archive_path, :name => 'aspera_enterprise_config', :path => '/opt/aspera/etc' },
  ]

end

# @see http://download.asperasoft.com/download/docs/faspex/3.9.1/admin_linux/webhelp/index.html#dita/backup.html
class AsperaFaspexArchive < BaseArchive


  TASKS = [

    { :type => :archive_aspera_faspex },

    { :type => :archive_path, :name => 'aspera_faspex_config', :path => '/opt/aspera/faspex/faspex.rb.yml' },
    { :type => :archive_path, :name => 'aspera_faspex_config_dir', :path => '/opt/aspera/faspex/config' },

  ]

end

class AsperaOrchestratorArchive < BaseArchive

  TASKS = [

    { :type => :archive_aspera_orchestrator },

    { :type => :archive_path, :name => 'aspera_orchestrator_apache_config', :path => '/opt/aspera/common/apache/conf' },
    { :type => :archive_path, :name => 'aspera_orchestrator_mysql_config', :path => '/opt/aspera/common/mysql/my.ini' },

    # Portlets
    { :type => :archive_path, :name => 'aspera_orchestrator_aspera_portlets', :path => '/opt/aspera/orchestrator/portlets' },
    { :type => :archive_path, :name => 'aspera_orchestrator_aspera_portlets_in_var_config', :path => '/opt/aspera/var/config/orchestrator/portlets' },

  ]
end

# @see http://download.asperasoft.com/download/docs/shares/1.9.1/admin_linux/pdf2/Shares_Admin_1.9.1_Linux.pdf
class AsperaSharesArchive < BaseArchive

  TASKS = [
    { :type => :archive_aspera_shares, :name => 'aspera_shares_backup' }
  ]

end

class CantemoPortalArchive < BaseArchive

  TASKS = [

    # Paths
    { :type => :archive_path, :name => 'cantemo_portal_configs',            :path => '/opt/cantemo/portal/configs' },
    { :type => :archive_path, :name => 'cantemo_portal_elasticsearch_conf', :path => '/etc/elasticsearch' },
    { :type => :archive_path, :name => 'cantemo_portal_etc',                :path => '/etc/cantemo/portal/' },
    { :type => :archive_path, :name => 'cantemo_portal_glassfish_domain',   :path => '/opt/glassfish3/glassfish/domains/domain1/config/domain.xml' },
    { :type => :archive_path, :name => 'cantemo_portal_glassfish_solr',     :path => '/opt/glassfish3/glassfish/solrhome' },
    { :type => :archive_path, :name => 'cantemo_portal_media',              :path => '/opt/cantemo/portal/portal_media' },
    { :type => :archive_path, :name => 'cantemo_portal_nginx',              :path => '/etc/nginx/conf.d/portal.conf' },
    { :type => :archive_path, :name => 'cantemo_portal_plugins',            :path => '/opt/cantemo/portal/plugins' },
    { :type => :archive_path, :name => 'cantemo_portal_rabbitmq',           :path => '/var/lib/rabbitmq' },
    { :type => :archive_path, :name => 'cantemo_portal_rabbitmq_conf',      :path => '/etc/rabbitmq' },
    { :type => :archive_path, :name => 'cantemo_portal_themes',             :path => '/opt/cantemo/portal/portal_themes' },
    { :type => :archive_path, :name => 'cantemo_portal_thumbnails',         :path => '/srv/thumbnail' },
    { :type => :archive_path, :name => 'cantemo_portal_usermedia',          :path => '/opt/cantemo/portal/usermedia' },

    # Postgres Databases
    { :type => :archive_postgresql_database, :name => 'cantemo_portal_db', :database => { :name => 'portal', :username => 'postgres', :password => 'postgres' } },
    { :type => :archive_postgresql_database, :name => 'cantemo_vidispine_db', :database => { :name => 'vidispine', :username => 'postgres', :password => 'postgres' } },

    # Elasticsearch Indexes
    { :type => :archive_elasticsearch_index, :name => 'cantemo_portal_elasticsearch' }

  ]

end

# @!endgroup Archive Classes

# #################################################################################################################### #

# backup_tasks = OrchestratorArchive.tasks
# backup_tasks = CantemoPortalArchive.tasks + AsperaOrchestratorArchive.tasks
#backup_tasks = (Object.constants - @existing_constants).delete_if { |obj| !Object.const_get(obj).respond_to?(:tasks) }.map { |obj| Object.const_get(obj).tasks }.flatten

to_archive = [ ]
to_archive << ArchiwareArchive if archive_archiware?
to_archive << AsperaClusterManagerArchive if archive_aspera_cluster_manager?
to_archive << AsperaConsoleServerArchive if archive_aspera_console?
to_archive << AsperaEnterpriseServerArchive if archive_aspera_enterprise?
to_archive << AsperaFaspexArchive if archive_aspera_faspex?
to_archive << AsperaOrchestratorArchive if archive_aspera_orchestrator?
to_archive << AsperaSharesArchive if archive_aspera_shares?
to_archive << CantemoPortalArchive if archive_cantemo_portal?

begin
  FileUtils.mkdir_p(archive_dir_base_path) unless dry_run?

  execute(%(mkdir -p "#{archive_dir}"))
  if dry_run?
    execute(%(cd "#{archive_dir}"))
  else
    logger.info { %(Executing: cd "#{archive_dir}") }
    Dir.chdir(archive_dir)
  end


  logger.debug { %(Archive Dir: "#{archive_dir}") }
  logger.add_target(log_file_path) if !dry_run? and logger.respond_to?(:add_target)

  to_archive.each do |archive|
    echo "# ### #{archive.name} start ###"
    backup_tasks = archive.tasks

    logger.debug { "Tasks: (#{backup_tasks.length}) #{backup_tasks.inspect}" }
    backup_tasks.each do |task|
      logger.debug { "Processing Task: #{task.inspect}" }
      case task[:type]
        when :archive_archiware; archive_archiware(task)
        when :archive_aspera_console; archive_aspera_console(task)
        when :archive_aspera_faspex; archive_aspera_faspex(task)
        when :archive_aspera_enterprise; archive_aspera_enterprise(task)
        when :archive_aspera_orchestrator; archive_aspera_orchestrator(task)
        when :archive_aspera_shares; archive_aspera_shares(task)
        when :archive_elasticsearch_index; archive_elasticsearch_index(task)
        # when :archive_mysql_database; archive_mysql_database(task)
        when :archive_path; archive_path(task)
        when :archive_postgresql_database; archive_postgresql_database(task)
        # when :archive_redis_database; archive_redis_database(task)
      end
    end
    echo "# ### #{archive.name} end ###"
  end

  archive_dir_path = File.join(archive_dir_base_path, archive_name)
  execute(%(cd "#{archive_dir_base_path}";tar czvf "#{archive_file_name}" "#{archive_name}"))
  execute(%(rm -rf "#{archive_dir_path}"))
  echo %(Archive Created: '#{File.join(archive_dir_base_path, archive_file_name)}')

ensure
  logger.info { "Command#{dry_run? ? 's (Dry Run)' : ' History'}:\n#{@command_history.join("\n")}" } if (dry_run? || output_command_history?)
  Dir.chdir(preserved_working_dir)
end

