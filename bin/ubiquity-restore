#!/usr/bin/env ruby
lib_path = File.expand_path('../../lib', __FILE__)
$:.unshift(lib_path) unless $:.include?(lib_path) or !File.exists?(lib_path)

require 'rubygems'
require 'logger'
require 'optparse'

ARGV << '--help' if ARGV.empty?

# #################################################################################################################### #

# @!group Default Parameter Values

@archive_dir_base_path = '/tmp' # Dir.tmpdir
def archive_dir_base_path; @archive_dir_base_path end

@archive_restore_base_dir = '/'
def archive_restore_base_dir; @archive_restore_base_dir end

@dry_run = true
def dry_run?; @dry_run end

@output_command_history = false
def output_command_history?; @output_command_history end

@restore_archiware = true
def restore_archiware?; @restore_archiware end

@restore_aspera_cluster_manager = true
def restore_aspera_cluster_manager?; @restore_aspera_cluster_manager end

@restore_aspera_console = true
def restore_aspera_console?; @restore_aspera_console end

@restore_aspera_enterprise = true
def restore_aspera_enterprise?; @restore_aspera_enterprise end

@restore_aspera_faspex = true
def restore_aspera_faspex?; @restore_aspera_faspex end

@restore_aspera_shares = true
def restore_aspera_shares?; @restore_aspera_shares end

@restore_aspera_orchestrator = true
def restore_aspera_orchestrator?; @restore_aspera_orchestrator end

@restore_cantemo_portal = true
def restore_cantemo_portal?; @restore_cantemo_portal end

# @!endgroup

# #################################################################################################################### #

# @!group Argument Handling

op = OptionParser.new
op.program_name = File.basename($0)
op.banner = <<-BANNER
Usage: #{op.program_name} [options] <archive-file-name> [system name(s)]

Examples:

  (Dry-Run)
  # #{op.program_name} "/tmp/ubiquity-backup-20150317-8490-121vm8r.tgz"

  (Non Dry-Run)
  # #{op.program_name} "/tmp/ubiquity-backup-20150317-8490-121vm8r.tgz" --no-dry-run

Options:
BANNER
op.on('--archive-dir-path PATH', 'The path of the directory to extract the archive directory in.', "default: #{archive_dir_base_path}\n\n") { |v| @archive_dir_base_path = v }
op.on('--[no-]dry-run', 'Will output the commands to be run but will not execute them.', "default: #{dry_run?}\n\n") { |v| @dry_run = v }
op.on('--[no-]output-command-history', 'Will show the commands that were run. This is redundant if noop is true.') { |v| @output_command_history = v }
op.on('--[no-]restore-archiware', 'Will run through the commands to restore Archiware.', "default: #{restore_archiware?}\n\n") { |v| @restore_archiware = v }
op.on('--[no-]restore-aspera-console', 'Will run through the commands to restore Aspera Console.', "default: #{restore_aspera_console?}\n\n") { |v| @restore_aspera_console = v }
op.on('--[no-]restore-aspera-enterprise', 'Will run through the commands to restore Aspera Enterprise.', "default: #{restore_aspera_enterprise?}\n\n") { |v| @restore_aspera_enterprise = v }
op.on('--[no-]restore-aspera-faspex', 'Will run through the commands to restore Aspera Faspex.', "default: #{restore_aspera_faspex?}\n\n") { |v| @restore_aspera_faspex = v }
op.on('--[no-]restore-aspera-orchestrator', 'Will run through the commands to restore Aspera Orchestrator',"default: #{restore_aspera_orchestrator?}\n\n") { |v| @restore_aspera_orchestrator = v }
op.on('--[no-]restore-aspera-shares', 'Will run through the commands to restore Aspera Shares.', "default: #{restore_aspera_shares?}\n\n") { |v| @restore_aspera_shares = v }
op.on('--[no-]restore-cantemo-portal', 'Will run through the commands to restore Cantemo Portal', "default: #{restore_cantemo_portal?}\n\n") { |v| @restore_cantemo_portal = v }
op.on('--help', 'Display this message.') { puts op; puts banner_footer; exit }
def banner_footer
  <<-BANNER

System Names:
  all (default)
  archiware
  aspera_cluster_manager
  aspera_console
  aspera_enterprise
  aspera_faspex
  aspera_orchestrator
  aspera_shares
  cantemo_portal

  * Note: Supplying a system name will override a --no-[system-name] option
  BANNER
end
op.parse!

archive_file_path = ARGV.shift
abort 'Archive File Must be Specified.' unless archive_file_path
abort "Archive File Not Found. '#{archive_file_path}'" unless (dry_run? || File.exist?(archive_file_path))

# Look for specific systems being passes as arguments
unless ARGV.empty?
  @restore_archiware              = false
  @restore_aspera_cluster_manager = false
  @restore_aspera_console         = false
  @restore_aspera_enterprise      = false
  @restore_aspera_faspex          = false
  @restore_aspera_orchestrator    = false
  @restore_aspera_shares          = false
  @restore_cantemo_portal         = false

  ARGV.each do |val|
    _val = val.downcase.gsub(/[-_]/, '')
    case _val
      when 'all'
        @restore_archiware              = true
        @restore_aspera_cluster_manager = true
        @restore_aspera_console         = true
        @restore_aspera_enterprise      = true
        @restore_aspera_faspex          = true
        @restore_aspera_orchestrator    = true
        @restore_aspera_shares          = true
        @restore_cantemo_portal         = true
      when 'archiware';            @restore_archiware               = true
      when 'asperaclustermanager'; @restore_aspera_cluster_manager  = true
      when 'asperaconsole';        @restore_aspera_console          = true
      when 'asperaenterprise';     @restore_aspera_enterprise       = true
      when 'asperafaspex';         @restore_aspera_faspex           = true
      when 'asperaorchestrator';   @restore_aspera_orchestrator     = true
      when 'asperashares';         @restore_aspera_shares           = true
      when 'cantemoportal';        @restore_cantemo_portal          = true
      else
        abort <<-ERRMSG
        Unknown System Name: #{_val}
        Known System Names:
          all
          archiware
          aspera_cluster_manager
          aspera_console
          aspera_enterprise
          aspera_faspex
          aspera_orchestrator
          aspera_shares
          cantemo_portal
        ERRMSG
    end
    # ARGV.each
  end
  # ARGV.empty?
end

# @!endgroup Argument Handling

# #################################################################################################################### #


@logger = Logger.new(STDOUT)
def logger; @logger end
logger.level = Logger::DEBUG

@command_history = [ ]

def execute(command_line, options = { })
  _no_op = options.fetch(:dry_run, dry_run?)
  _method = options[:method] || :backtick

  @command_history << command_line
  return if _no_op
  logger.debug { "Executing: #{command_line}" }

  response = case _method
               when :backtick, 'backtick'; `#{command_line}`
               when :system, 'systemm'; system(command_line)
             end
  logger.debug { response }
  response
end

def echo(message, options = { })
  if dry_run?
    execute(%(echo "#{message}"))
  else
    puts message
  end
end

def tar_extract_to_string
  @tar_extract_to_string ||= (archive_restore_base_dir ? %( -C "#{archive_restore_base_dir}") : '')
end

def untar_archive_file(archive_file_name, options = { })
  command_line = %(sudo tar xzvf "#{archive_dir_path}/#{archive_file_name}"#{tar_extract_to_string})
  execute(command_line)
end

# @archive_file_name = 'ubiquity-backup-20150317-8646-awcuf4.tgz'
@archive_name = File.basename(archive_file_path, '.*')
def archive_name; @archive_name end

@archive_dir_path = File.join(archive_dir_base_path, archive_name)
def archive_dir_path; @archive_dir_path end

# @archive_file_name = "#{archive_name}.tgz"
@archive_file_name = File.basename(archive_file_path)
def archive_file_name; @archive_file_name end


# #################################################################################################################### #

# @!group Restore Methods

def restore_archiware
  echo '# ### ARCHIWARE RESTORATION - BEGIN ###'
  untar_archive_file 'archiware'
  echo '# ### ARCHIWARE RESTORATION - END ###'
end

def restore_aspera_cluster_manager
  echo '# ### ASPERA CLUSTER MANAGER RESTORATION - BEGIN ###'
  untar_archive_file 'aspera_cluster_manager.tgz'
  echo '# ### ASPERA CLUSTER MANAGER RESTORATION - END ###'
end

# @see http://download.asperasoft.com/download/docs/console/2.5.1/admin_linux/webhelp/index.html#dita/restore_console_database.html
def restore_aspera_console
  echo '# ### ASPERA CONSOLE RESTORATION - BEGIN ###'

  console_base_path = '/opt/aspera/console'

  unless dry_run?
    unless File.exists?(console_base_path)
      warn "Could not find the Aspera Console Directory. Aborting Aspera Console Restoration\n\tPath Not Found: '#{console_base_path}'"
    end
  end

  untar_archive_file 'aspera_common_dir.tgz'
  untar_archive_file 'aspera_console_dir.tgz'
  untar_archive_file 'aspera_console_database.tgz'

  execute 'sudo asctl console:stop'

  _archive_restore_base_dir = archive_restore_base_dir || '/'
  _archive_restore_base_dir << '/' unless archive_restore_base_dir.end_with?('/')
  execute %(export NEW_ARCHIVE_DIR=$(tar ztf "#{archive_dir_path}/aspera_console_database.tgz" | tail -1 | xargs dirname);yes "y" | asctl -v console:restore_database "#{_archive_restore_base_dir}$NEW_ARCHIVE_DIR";unset NEW_ARCHIVE_DIR)

  execute 'sudo asctl console:start'

  echo '# ### ASPERA CONSOLE RESTORATION - END ###'
end

# @see http://download.asperasoft.com/download/docs/entsrv/3.5.4/es_admin_linux/webhelp/index.html#dita/redis_backup.html
def restore_aspera_enterprise
  echo '# ### ASPERA ENTERPRISE RESTORATION - BEGIN ###'

  asnodeadmin_path = '/opt/aspera/bin/asnodeadmin'

  unless dry_run?
    unless File.exists?(asnodeadmin_path)
      warn "Could not find the Aspera asnodeadmin. Aborting Aspera Orchestrator Restoration.\n\tFile Not Found: '#{asnodeadmin_path}'"
      return
    end
  end

  untar_archive_file('aspera_enterprise_config.tgz')
  untar_archive_file('aspera_enterprise_var.tgz')

  execute %(sudo "#{asnodeadmin_path}" -r "#{archive_dir_path}/aspera_enterprise_database.snapshot")

  execute 'sudo /etc/init.d/asperanoded restart'

  echo '# ### ASPERA ENTERPRISE RESTORATION - END ###'
end

# @see http://download.asperasoft.com/download/docs/faspex/3.9.1/admin_linux/webhelp/index.html#dita/backup_restore.html
def restore_aspera_faspex
  echo '# ### ASPERA FASPEX RESTORATION - BEGIN ###'

  faspex_base_path = '/opt/aspera/faspex'

  unless dry_run?
    unless File.exists?(faspex_base_path)
      warn "Could not find the Aspera Faspex Directory. Aborting Aspera Faspex Restoration\n\tPath Not Found: '#{faspex_base_path}'"
    end
  end

  untar_archive_file('aspera_faxpex_config.tgz')
  untar_archive_file('aspera_faspex_config_dir.tgz')
  untar_archive_file('aspera_faspex_database.tgz')

  _archive_restore_base_dir = archive_restore_base_dir || '/'
  _archive_restore_base_dir << '/' unless archive_restore_base_dir.end_with?('/')
  execute %(export NEW_ARCHIVE_DIR=$(tar ztf "#{archive_dir_path}/aspera_faspex_database.tgz" | tail -1 | xargs dirname);yes "y" | asctl faspex:restore_database "#{_archive_restore_base_dir}$NEW_ARCHIVE_DIR";unset NEW_ARCHIVE_DIR)

  echo '# ### ASPERA FASPEX RESTORATION - END ###'
end

def restore_aspera_orchestrator
  echo '# ### ASPERA ORCHESTRATOR RESTORATION - BEGIN ###'

  aspera_orchestrator_dir_path = '/opt/aspera/orchestrator'

  snapshot_file_name = "aspera_orchestrator_snapshot_#{archive_name}.snap"
  archive_snapshot_file_path = File.join(archive_dir_path, snapshot_file_name)

  snapshot_dir_path = '/opt/aspera/var/archive/orchestrator'
  snapshot_file_path = File.join(snapshot_dir_path, snapshot_file_name)

  unless dry_run?

    unless File.exists?(aspera_orchestrator_dir_path)
      warn "Could not find the Aspera Orchestrator Directory. Aborting Aspera Orchestrator Restoration.\n\tPath Not Found: '#{aspera_orchestrator_dir_path}'"
      return
    end

    unless File.exists?(snapshot_dir_path)
      warn "Could not find the Aspera Orchestrator Snapshot. Aborting Aspera Orchestrator Restoration.\n\tPath Not Found: '#{snapshot_dir_path}'"
      return
    end

  end

  command_line = %(#{aspera_orchestrator_dir_path}/bin/orchestrator all kill)
  execute(command_line)

  untar_archive_file('aspera_orchestrator_apache_config.tgz')
  untar_archive_file('aspera_orchestrator_mysql_config.tgz')
  untar_archive_file('aspera_orchestrator_aspera_portlets.tgz')
  untar_archive_file('aspera_orchestrator_aspera_portlets_in_var_config.tgz')

  # command_line = %(cp "#{archive_dir_path}/#{archive_name}.snap" "/opt/aspera/var/archive/orchestrator/#{archive_name}.snap")
  # command_line = %(cp "#{archive_dir_path}/#{archive_name}.snap" "/opt/aspera/var/archive/orchestrator/snapshots/#{archive_name}.snap")
  command_line = %(cp "#{archive_snapshot_file_path}" "#{snapshot_file_path}")
  execute(command_line)

  command_line = %(export GEM_HOME="#{aspera_orchestrator_dir_path}/vendor/dependencies/linux-gnu";cd "#{aspera_orchestrator_dir_path}";ruby script/runner script/snapshot "#{snapshot_file_path}")
  # command_line = %(export GEM_HOME="/opt/aspera/orchestrator/vendor/dependencies/linux-gnu";cd /opt/aspera/orchestrator;ruby script/runner 'puts Snapshot.extract_snapshot("#{snapshot_file_path}")')
  # We use the system method to execute this call because application hangs were occurring when using backticks
  execute(command_line, :method => :system)

  # command_line = %(/opt/aspera/orchestrator/bin/orchestrator all start)
  # execute(command_line, :method => :system)

  echo '# ### ASPERA ORCHESTRATOR RESTORATION - END ###'
end

# @see http://download.asperasoft.com/download/docs/shares/1.9.1/admin_linux/webhelp/index.html#dita/restore.html
def restore_aspera_shares
  echo '# ### ASPERA SHARES RESTORATION - BEGIN ###'

  shares_restore_executable_path = '/opt/aspera/shares/u/setup/bin/restore'
  backup_dir = File.join(archive_dir_path, 'aspera_shares_archive')

  execute(%(export UB_ASPERA_SHARES_BACKUP_DIR=$(find "#{backup_dir}" -mindepth 1 -maxdepth 1 -type d);"#{shares_restore_executable_path}" "$UB_ASPERA_SHARES_BACKUP_DIR";unset UB_ASPERA_SHARES_BACKUP_DIR))

  echo '# ### ASPERA SHARES RESTORATION - END ###'
end

def restore_cantemo_portal(args = { })
  echo '# ### CANTEMO PORTAL RESTORATION - BEGIN ###'

  cantemo_portal_configs_archive_file_path = "#{archive_dir_path}/cantemo_portal_configs.tgz"
  unless dry_run? || File.exists?(cantemo_portal_configs_archive_file_path)
    warn "Could not find the Cantemo Portal Configs Archive. Aborting Cantemo Portal Restoration.\n File Not Found: #{cantemo_portal_configs_archive_file_path}"
    return
  end

  command_line = %(supervisorctl stop all;/etc/init.d/middleware stop)
  execute(command_line)

  untar_archive_file('cantemo_portal_configs.tgz')
  untar_archive_file('cantemo_portal_elasticsearch_conf.tgz')
  untar_archive_file('cantemo_portal_etc.tgz')
  untar_archive_file('cantemo_portal_glassfish_domain.tgz')
  untar_archive_file('cantemo_portal_nginx.tgz')
  untar_archive_file('cantemo_portal_media.tgz')
  untar_archive_file('cantemo_portal_glassfish_solr.tgz')
  untar_archive_file('cantemo_portal_rabbitmq_conf.tgz')
  untar_archive_file('cantemo_portal_themes.tgz')
  untar_archive_file('cantemo_portal_thumbnails.tgz')
  untar_archive_file('cantemo_portal_usermedia.tgz')


  portal_db_sql_file_path = File.join(archive_dir_path, 'cantemo_portal_db.sql')
  vidispine_db_sql_file_path = File.join(archive_dir_path, 'cantemo_vidispine_db.sql')

  echo 'The following line needs to be set to 1 in order for the Cantemo Portal databases to be restored.'

  execute %(export UB_CP_RESTORE_DB=#{dry_run? ? '0' : '1'})

  execute %(export UB_CP_RESTORE_DB_PORTAL=$(([ -r "#{portal_db_sql_file_path}" ] && echo 1) || echo 0))

  execute %(export UB_CP_RESTORE_DB_VIDISPINE=$(([ -r "#{vidispine_db_sql_file_path}" ] && echo 1) || echo 0))

  execute 'export UB_CP_RESTORE_DB_FINAL=$(([ $UB_CP_RESTORE_DB -eq 1 ] && [ $UB_CP_RESTORE_DB_PORTAL -eq 1 ] && [ $UB_CP_RESTORE_DB_VIDISPINE -eq 1 ] && echo 1) || echo 0)'

  execute %([ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && sudo -u postgres "/usr/bin/pg_dumpall" > "#{File.join(archive_dir_path, "pg_dumpall_#{Time.now.to_i}.sql")}")

  # command_line = %(export PGPASSWORD=postgres;"/usr/bin/psql" -h localhost -U postgres -c "DROP DATABASE portal;";unset PGPASSWORD)
  execute '[ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && sudo -u postgres dropdb portal'

  execute '[ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && sudo -u postgres createdb portal'

  execute %([ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && export PGPASSWORD=postgres;"/usr/bin/psql" -h localhost -U postgres portal -f "#{portal_db_sql_file_path}";unset PGPASSWORD)

  # command_line = %(export PGPASSWORD=postgres;"/usr/bin/psql" -h localhost -U postgres -c "DROP DATABASE vidispine;";unset PGPASSWORD)
  execute '[ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && sudo -u postgres dropdb vidispine'

  execute '[ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && sudo -u postgres createdb vidispine'

  execute %([ $UB_CP_RESTORE_DB_FINAL -eq 1 ] && export PGPASSWORD=postgres;"/usr/bin/psql" -h localhost -U postgres vidispine -f "#{vidispine_db_sql_file_path}";unset PGPASSWORD)


  execute '/etc/init.d/middleware start;supervisorctl start all'

  es_host = args[:elasticsearch_host] || 'localhost'
  es_port = args[:elasticsearch_port] || 9200
  use_curl = File.executable?('curl')

  data = %({ "type":"fs","settings":{"compress":true,"location":"#{File.join(archive_dir_path, 'cantemo_portal_elasticsearch')}" } })
  if dry_run? || use_curl
    # execute(%(curl -XPOST   "#{es_host}:#{es_port}/_all/_close"))
    execute(%(curl -XPOST   "#{es_host}:#{es_port}/portal_1/_close"))
    execute(%(curl -XPUT    "#{es_host}:#{es_port}/_snapshot/#{archive_name}" -d '#{data}'))
    execute(%(curl -XPOST   "#{es_host}:#{es_port}/_snapshot/#{archive_name}/snapshot_1/_restore"))
    execute(%(curl -XDELETE "#{es_host}:#{es_port}/_snapshot/#{archive_name}"))
    # execute(%(curl -XPOST   "#{es_host}:#{es_port}/_all/_open"))
    # execute(%(curl -XPOST   "#{es_host}:#{es_port}/portal_1/_open"))
  else
    http = Net::HTTP.new(es_host, es_port)
    # http.post(   '/_all/_close', '')
    http.post(   '/portal_1/_close', '')
    http.put(    "/_snapshot/#{archive_name}", data)
    http.post(   "/_snapshot/#{archive_name}/snapshot_1/_restore", '')
    http.delete( "/_snapshot/#{archive_name}")
    # http.post(   '/_all/_open', '')
  end

  # Force a re-index of the items
  # command_line = %(/opt/cantemo/portal/manage.py reindex)
  # execute(command_line)

  echo '### CANTEMO PORTAL RESTORATION - END ###'
end

# @!endgroup Restore Methods

# #################################################################################################################### #

# Extract the snapshot archive inside of the archive_dir_path
command_line = %(tar xzvf "#{archive_file_path}" -C "#{archive_dir_base_path}")
execute(command_line)

restore_archiware if restore_archiware?
restore_aspera_console if restore_aspera_console?
restore_aspera_enterprise if restore_aspera_enterprise?
restore_aspera_faspex if restore_aspera_faspex?
restore_aspera_cluster_manager if restore_aspera_cluster_manager?
restore_aspera_orchestrator if restore_aspera_orchestrator?
restore_aspera_shares if restore_aspera_shares?
restore_cantemo_portal if restore_cantemo_portal?

puts "Command#{dry_run? ? 's' : ' History'}:\n#{@command_history.join("\n")}" if (dry_run? || output_command_history?)